// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// As tabelas Movie e MovieDetails possuem relacionamento 1:1.
// As tabelas Movie e Director possuem relacionamento 1:N.

model Movie {
  id String @id @default(uuid())
  title String
  releaseDate DateTime @default(now()) @map("release_date")
  
  movieDetailId String @unique @map("movie_detail_id")
  detail MovieDetail @relation(fields: [movieDetailId], references: [id], onDelete: Cascade)
  
  directorId String @map("director_id") 
  director Director @relation(fields: [directorId], references: [id])

@@map("movie")
}

model MovieDetail{
  id String @id @default(uuid())
  duration Int
  description String 
  Movie Movie?

  @@map("movie_detail")
}

model Director{
  id String @id @default(uuid())
  name String @db.VarChar(55)
  movie Movie[]

  @@map("director")
}



// *models para praticar

model User {
  id String @id @default(uuid())
  name String @db.VarChar(64)

  post Post[]

  registration Registration?

  @@map("user")
}

model Post {
  id String @id @default(uuid())
  text String @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id])

  @@map("post")
}

model Registration {
  id String @id @default(uuid())
  code Int 

  userId String @unique @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("registration")
}